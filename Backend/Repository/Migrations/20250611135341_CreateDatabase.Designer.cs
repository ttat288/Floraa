// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository.Data;

#nullable disable

namespace Repository.Migrations
{
    [DbContext(typeof(FloraDbContext))]
    [Migration("20250611135341_CreateDatabase")]
    partial class CreateDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Repository.Models.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Repository.Models.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("Repository.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryName");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            CategoryName = "Hoa Tươi",
                            CreatedAt = new DateTime(2025, 6, 11, 13, 53, 40, 369, DateTimeKind.Utc).AddTicks(9650),
                            Description = "Các loại hoa tươi đẹp cho mọi dịp",
                            IsActive = true
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            CategoryName = "Hoa Cưới",
                            CreatedAt = new DateTime(2025, 6, 11, 13, 53, 40, 369, DateTimeKind.Utc).AddTicks(9653),
                            Description = "Hoa cưới và trang trí tiệc cưới",
                            IsActive = true
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            CategoryName = "Hoa Sinh Nhật",
                            CreatedAt = new DateTime(2025, 6, 11, 13, 53, 40, 369, DateTimeKind.Utc).AddTicks(9656),
                            Description = "Hoa tặng sinh nhật ý nghĩa",
                            IsActive = true
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            CategoryName = "Hoa Khai Trương",
                            CreatedAt = new DateTime(2025, 6, 11, 13, 53, 40, 369, DateTimeKind.Utc).AddTicks(9658),
                            Description = "Hoa chúc mừng khai trương",
                            IsActive = true
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            CategoryName = "Hoa Chia Buồn",
                            CreatedAt = new DateTime(2025, 6, 11, 13, 53, 40, 369, DateTimeKind.Utc).AddTicks(9661),
                            Description = "Hoa chia buồn trang trọng",
                            IsActive = true
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            CategoryName = "Hoa Valentine",
                            CreatedAt = new DateTime(2025, 6, 11, 13, 53, 40, 369, DateTimeKind.Utc).AddTicks(9663),
                            Description = "Hoa tặng người yêu ngày Valentine",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("Repository.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CustomerPhone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime?>("DeliveredDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FinalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ShippedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("ShippingFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrderNumber")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Repository.Models.OrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("DiscountPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Repository.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal?>("DiscountPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ImageUrls")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductName");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000001"),
                            CategoryId = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedAt = new DateTime(2025, 6, 11, 13, 53, 40, 641, DateTimeKind.Utc).AddTicks(1864),
                            Description = "Bó hoa hồng đỏ tươi đẹp, thể hiện tình yêu chân thành",
                            IsActive = true,
                            IsFeatured = true,
                            Price = 250000m,
                            ProductName = "Bó Hoa Hồng Đỏ",
                            StockQuantity = 50
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000002"),
                            CategoryId = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedAt = new DateTime(2025, 6, 11, 13, 53, 40, 641, DateTimeKind.Utc).AddTicks(1869),
                            Description = "Bó hoa hồng trắng tinh khôi, thanh tao",
                            IsActive = true,
                            IsFeatured = false,
                            Price = 230000m,
                            ProductName = "Bó Hoa Hồng Trắng",
                            StockQuantity = 45
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000003"),
                            CategoryId = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedAt = new DateTime(2025, 6, 11, 13, 53, 40, 641, DateTimeKind.Utc).AddTicks(1877),
                            Description = "Bó hoa tulip đầy màu sắc, tươi mới",
                            DiscountPrice = 150000m,
                            IsActive = true,
                            IsFeatured = true,
                            Price = 180000m,
                            ProductName = "Bó Hoa Tulip",
                            StockQuantity = 30
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000004"),
                            CategoryId = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedAt = new DateTime(2025, 6, 11, 13, 53, 40, 641, DateTimeKind.Utc).AddTicks(1893),
                            Description = "Bó hoa ly thơm ngát, sang trọng",
                            IsActive = true,
                            IsFeatured = false,
                            Price = 200000m,
                            ProductName = "Bó Hoa Ly",
                            StockQuantity = 25
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000001"),
                            CategoryId = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedAt = new DateTime(2025, 6, 11, 13, 53, 40, 641, DateTimeKind.Utc).AddTicks(1915),
                            Description = "Hoa cưới cầm tay tinh tế cho cô dâu",
                            IsActive = true,
                            IsFeatured = true,
                            Price = 500000m,
                            ProductName = "Hoa Cưới Cầm Tay",
                            StockQuantity = 20
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000002"),
                            CategoryId = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedAt = new DateTime(2025, 6, 11, 13, 53, 40, 641, DateTimeKind.Utc).AddTicks(1929),
                            Description = "Hoa cài áo thanh lịch cho chú rể",
                            IsActive = true,
                            IsFeatured = false,
                            Price = 50000m,
                            ProductName = "Hoa Cài Áo Chú Rể",
                            StockQuantity = 50
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000003"),
                            CategoryId = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedAt = new DateTime(2025, 6, 11, 13, 53, 40, 641, DateTimeKind.Utc).AddTicks(1933),
                            Description = "Hoa trang trí bàn tiệc cưới lãng mạn",
                            IsActive = true,
                            IsFeatured = true,
                            Price = 300000m,
                            ProductName = "Trang Trí Bàn Tiệc Cưới",
                            StockQuantity = 15
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000001"),
                            CategoryId = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedAt = new DateTime(2025, 6, 11, 13, 53, 40, 641, DateTimeKind.Utc).AddTicks(1947),
                            Description = "Bó hoa sinh nhật đầy màu sắc và ý nghĩa",
                            IsActive = true,
                            IsFeatured = true,
                            Price = 180000m,
                            ProductName = "Bó Hoa Sinh Nhật Rực Rỡ",
                            StockQuantity = 30
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000002"),
                            CategoryId = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedAt = new DateTime(2025, 6, 11, 13, 53, 40, 641, DateTimeKind.Utc).AddTicks(1951),
                            Description = "Giỏ hoa sinh nhật xinh xắn, đáng yêu",
                            DiscountPrice = 200000m,
                            IsActive = true,
                            IsFeatured = false,
                            Price = 220000m,
                            ProductName = "Giỏ Hoa Sinh Nhật",
                            StockQuantity = 20
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000003"),
                            CategoryId = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedAt = new DateTime(2025, 6, 11, 13, 53, 40, 641, DateTimeKind.Utc).AddTicks(1954),
                            Description = "Hoa hướng dương tươi vui cho sinh nhật",
                            IsActive = true,
                            IsFeatured = false,
                            Price = 160000m,
                            ProductName = "Hoa Hướng Dương Sinh Nhật",
                            StockQuantity = 35
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000001"),
                            CategoryId = new Guid("44444444-4444-4444-4444-444444444444"),
                            CreatedAt = new DateTime(2025, 6, 11, 13, 53, 40, 641, DateTimeKind.Utc).AddTicks(2069),
                            Description = "Lẵng hoa khai trương sang trọng, mang lại may mắn",
                            IsActive = true,
                            IsFeatured = true,
                            Price = 800000m,
                            ProductName = "Lẵng Hoa Khai Trương Sang Trọng",
                            StockQuantity = 15
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000002"),
                            CategoryId = new Guid("44444444-4444-4444-4444-444444444444"),
                            CreatedAt = new DateTime(2025, 6, 11, 13, 53, 40, 641, DateTimeKind.Utc).AddTicks(2073),
                            Description = "Chậu hoa khai trương tươi lâu",
                            IsActive = true,
                            IsFeatured = false,
                            Price = 350000m,
                            ProductName = "Chậu Hoa Khai Trương",
                            StockQuantity = 25
                        },
                        new
                        {
                            Id = new Guid("50000000-0000-0000-0000-000000000001"),
                            CategoryId = new Guid("55555555-5555-5555-5555-555555555555"),
                            CreatedAt = new DateTime(2025, 6, 11, 13, 53, 40, 641, DateTimeKind.Utc).AddTicks(2081),
                            Description = "Vòng hoa chia buồn trang trọng",
                            IsActive = true,
                            IsFeatured = false,
                            Price = 600000m,
                            ProductName = "Vòng Hoa Chia Buồn",
                            StockQuantity = 10
                        },
                        new
                        {
                            Id = new Guid("50000000-0000-0000-0000-000000000002"),
                            CategoryId = new Guid("55555555-5555-5555-5555-555555555555"),
                            CreatedAt = new DateTime(2025, 6, 11, 13, 53, 40, 641, DateTimeKind.Utc).AddTicks(2092),
                            Description = "Lẵng hoa chia buồn thanh tịnh",
                            IsActive = true,
                            IsFeatured = false,
                            Price = 450000m,
                            ProductName = "Lẵng Hoa Chia Buồn",
                            StockQuantity = 12
                        },
                        new
                        {
                            Id = new Guid("60000000-0000-0000-0000-000000000001"),
                            CategoryId = new Guid("66666666-6666-6666-6666-666666666666"),
                            CreatedAt = new DateTime(2025, 6, 11, 13, 53, 40, 641, DateTimeKind.Utc).AddTicks(2095),
                            Description = "Bó hoa Valentine đặc biệt cho người yêu",
                            DiscountPrice = 300000m,
                            IsActive = true,
                            IsFeatured = true,
                            Price = 350000m,
                            ProductName = "Bó Hoa Valentine Đặc Biệt",
                            StockQuantity = 40
                        },
                        new
                        {
                            Id = new Guid("60000000-0000-0000-0000-000000000002"),
                            CategoryId = new Guid("66666666-6666-6666-6666-666666666666"),
                            CreatedAt = new DateTime(2025, 6, 11, 13, 53, 40, 641, DateTimeKind.Utc).AddTicks(2101),
                            Description = "Hộp hoa Valentine sang trọng",
                            IsActive = true,
                            IsFeatured = true,
                            Price = 280000m,
                            ProductName = "Hộp Hoa Valentine",
                            StockQuantity = 30
                        });
                });

            modelBuilder.Entity("Repository.Models.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<string>("ReasonRevoked")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ReplacedByToken")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Repository.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmailConfirmationToken")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PasswordResetToken")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("PasswordResetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CreatedAt = new DateTime(2025, 6, 11, 13, 53, 40, 499, DateTimeKind.Utc).AddTicks(9638),
                            Email = "admin@flora.com",
                            EmailConfirmed = true,
                            FullName = "Administrator",
                            IsActive = true,
                            PasswordHash = "$2a$11$95bETPY9DW7/6BQJBzRKvetEdAkEc/4sbMSuB/K5wN5OWAARc3cHa",
                            Role = "Admin"
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            CreatedAt = new DateTime(2025, 6, 11, 13, 53, 40, 641, DateTimeKind.Utc).AddTicks(1298),
                            Email = "staff@flora.com",
                            EmailConfirmed = true,
                            FullName = "Staff User",
                            IsActive = true,
                            PasswordHash = "$2a$11$PMvV1Fl/MR/9cc99uDfLjeoJhpvEGEdeyUcaj9DJ2jyXuo3nOpMu.",
                            Role = "Staff"
                        });
                });

            modelBuilder.Entity("Repository.Models.Cart", b =>
                {
                    b.HasOne("Repository.Models.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.Models.CartItem", b =>
                {
                    b.HasOne("Repository.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repository.Models.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Repository.Models.Order", b =>
                {
                    b.HasOne("Repository.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.Models.OrderDetail", b =>
                {
                    b.HasOne("Repository.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repository.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Repository.Models.Product", b =>
                {
                    b.HasOne("Repository.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Repository.Models.RefreshToken", b =>
                {
                    b.HasOne("Repository.Models.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.Models.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("Repository.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Repository.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Repository.Models.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Repository.Models.User", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Orders");

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
